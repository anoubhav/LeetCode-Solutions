# My brute force solution
def bruteForce(n):
    # O(32^3) to precompute. O(1) query.
    lst= []
    end = 32 # max 32-bit answer
    for i in range(end):
        for j in range(end):
            for k in range(end):
                lst.append(2**i * 3**j * 5**k)
    lst.sort()
    return lst[n-1]

def DP(n):
    # O(N)
    # The key is to realize each number can be and has to be generated by a former number multiplied by 2, 3 or 5

    ugly = [1]
    p2, p3, p5 = 0, 0, 0
    while n > 1:
        nxt = min(ugly[p2]*2, ugly[p3]*3, ugly[p5]*5)
        if nxt == ugly[p2]*2: p2 += 1
        if nxt == ugly[p3]*3: p3 += 1
        if nxt == ugly[p5]*5: p5 += 1
        ugly.append(nxt)
        n-= 1
    return ugly[-1]

n = 100
print(bruteForce(n))
print(DP(n))